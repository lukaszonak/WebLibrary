// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using WebServer.WebDataLibrary;

namespace WebDataLibrary.Migrations
{
    [DbContext(typeof(DatabaseModel))]
    [Migration("20180605183822_uproszczenie_mdelu_Usera")]
    partial class uproszczenie_mdelu_Usera
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebDataLibrary.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("WebDataLibrary.Entities.Cover", b =>
                {
                    b.Property<int>("CoverId")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Content");

                    b.Property<string>("ContentType")
                        .HasMaxLength(100);

                    b.Property<string>("FileName")
                        .HasMaxLength(255);

                    b.Property<int>("MediaId");

                    b.HasKey("CoverId");

                    b.HasIndex("MediaId");

                    b.ToTable("Covers");
                });

            modelBuilder.Entity("WebDataLibrary.Entities.Hire", b =>
                {
                    b.Property<int>("HireId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("HireDate");

                    b.Property<string>("Person")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("PositionId");

                    b.HasKey("HireId");

                    b.HasIndex("PositionId");

                    b.ToTable("Hiteres");
                });

            modelBuilder.Entity("WebDataLibrary.Entities.Position", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Availability");

                    b.Property<int>("CategoryId");

                    b.Property<int>("MediaYear");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("MediaId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("WebDataLibrary.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleName")
                        .IsRequired();

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("WebDataLibrary.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<int>("RoleId");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebDataLibrary.Entities.Cover", b =>
                {
                    b.HasOne("WebDataLibrary.Entities.Position", "Position")
                        .WithMany("Covers")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebDataLibrary.Entities.Hire", b =>
                {
                    b.HasOne("WebDataLibrary.Entities.Position", "Position")
                        .WithMany("Hires")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebDataLibrary.Entities.Position", b =>
                {
                    b.HasOne("WebDataLibrary.Entities.Category", "Category")
                        .WithMany("Positions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebDataLibrary.Entities.User", b =>
                {
                    b.HasOne("WebDataLibrary.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
